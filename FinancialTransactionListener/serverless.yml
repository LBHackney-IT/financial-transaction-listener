service: financial-transaction-listener
provider:
  name: aws
  runtime: dotnet6
  memorySize: 2048
  timeout: 300
  tracing:
    lambda: true
    apiGateway: true
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2

package:
  artifact: ./bin/release/net6.0/financial-transaction-listener.zip

functions:
  FinancialTransactionListener:
    name: ${self:service}-${self:provider.stage}
    handler: FinancialTransactionListener::FinancialTransactionListener.SqsFunction::FunctionHandler
    role: lambdaExecutionRole
    environment:
      ### Re-use the same parameter as used by web api applications
      ENVIRONMENT:  ${ssm:/housing-tl/${self:provider.stage}/aspnetcore-environment}
      ELASTICSEARCH_DOMAIN_URL: ${ssm:/housing-search-api/${self:provider.stage}/elasticsearch-domain}
      TransactionApiUrl: ${ssm:/housing-finance/${self:provider.stage}/financial-transaction-api-url}
      TransactionApiToken: ${ssm:/housing-finance/${self:provider.stage}/financial-transaction-api-token}
    events:
      ### Specify the parameter containing the queue arn used to trigget the lambda function here
      ### This will have been defined in the terraform configuration
      - sqs: ${ssm:/sqs-queue/${self:provider.stage}/financial_transaction_listener_queue/arn} 
      
resources:
  Resources:
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: ${self:service}-${self:provider.stage}-sg
        GroupDescription: Allow all outbound traffic
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
        VpcId: ${self:custom.vpcId.${opt:stage}}
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
          - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        Policies:          
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          ### Remove this if DynamoDb is not being used
          ### TODO - Enable and change the table name as required.
          #- PolicyName: dynamoDBAccess
          #  PolicyDocument:
          #    Version: '2012-10-17'
          #    Statement:
          #      - Effect: Allow
          #        Action:
          #          - "dynamodb:BatchGet*"
          #          - "dynamodb:BatchWrite"
          #          - "dynamodb:DeleteItem"
          #          - "dynamodb:DescribeStream"
          #          - "dynamodb:DescribeTable"
          #          - "dynamodb:Get*"
          #          - "dynamodb:PutItem"
          #          - "dynamodb:Query"
          #          - "dynamodb:Scan"
          #          - "dynamodb:UpdateItem"
          #        Resource:
          #          - 'Fn::Join':
          #              - ':'
          #              - - 'arn:aws:dynamodb'
          #                - Ref: 'AWS::Region'
          #                - Ref: 'AWS::AccountId'
          #                - 'table/SomeTable'
          #          - 'Fn::Join':
          #              - ':'
          #              - - 'arn:aws:dynamodb'
          #                - Ref: 'AWS::Region'
          #                - Ref: 'AWS::AccountId'
          #                - 'table/SomeTable/index/*'
          - PolicyName: sqsAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sqs:ChangeMessageVisibility"
                    - "sqs:DeleteMessage"
                    - "sqs:GetQueueAttributes"
                    - "sqs:GetQueueUrl"
                    - "sqs:ListQueueTags"
                    - "sqs:ReceiveMessage"
                    - "sqs:SendMessage"
                    - "kms:Decrypt"
                  Resource: "*"

custom:
  vpcId:
    development: vpc-0d15f152935c8716f
    staging: vpc-064521a7a4109ba31
    production: vpc-0ce853ddb64e8fb3c
  vpc:
    development:
      securityGroupIds:
        - sg-00d2e14f38245dd0b
      subnetIds:
        - subnet-0140d06fb84fdb547
        - subnet-05ce390ba88c42bfd
    staging:
      securityGroupIds:
        - sg-00c197e980177983d
      subnetIds:
        - subnet-0743d86e9b362fa38
        - subnet-0ea0020a44b98a2ca
    production:
      securityGroupIds:
        - sg-02a377899622e884c
      subnetIds:
        - subnet-0beb266003a56ca82
        - subnet-06a697d86a9b6ed01
